list of objects it has access too
and list of actions it can perform

list of objects = PROPERTIES
list of actions = METHODS

many default properties/methods
custom properties/methods

How do you write javascript?

	use Dot Syntax/Notation
		
		ex. car.seats <--gives number of seats
		    car.isTurnedOn <--gives yes or no response 

Instructions have parens
	
	ex. car.openSunRoof()


Variable
	
	something that refers to something else

		ex. var favColor = 'red'; <--var means variable and in this ex refers to my fav. color

			*always leave a space between var key word and name of the variable

			*variable name can have under_scores but no spaces and no dashes-

	Can use Camel Case
		*small first letter and then everytime there is another word capitalize 1st letter

			ex. var favColor = 'red';

	Semicolon ;
		shows the end of the line



	Assigning Values
		
		use ' '; 
		     |
		     |
		   value goes here

			*Can use double and single quotes when assigning values

	' ' <--putting quotes around a value you define them as strings or text
		
		*don't put quotes around values meant to be numbers  


In JavaScript:

	you can refer to
			  1. Text [called strings]
				
					ex. var myName = 'Kelsey';

			  2. Arrays 
		
					ex. var myArray = [];

Array:
	basically a list

	can store- 
			numbers
			text
			variables
			objects
			functions
			  etc...

	
Value Assigning for Arrays

	use []; brackets followed by ;semicolon

	divide array list items with commas and put quotes around each individual item

		ex. var myFavColors = ['black', 'red', 'purple'];

var numOfFavColors = 3; <--this value is defined as a number, so mathematical operations can be performed on it


Boolean Objects: 
		Values-
			True or False <---these values are basically the same as saying 1 or 0
			Yes or No     <---1 for true, 0 for false
			
			*True or false value you can be writen upper or lower case*

		ex. var hasGotFavColors = true;  
	

Object:

	*can combine all the types already mentioned  

	*like an array but you can give a name for every single list item

	
		ex. var kelseyObject = {
			firstName: 'Kelsey', <--string
			lastName: 'Swanson', <--string 
			favColors: ['black', 'red', 'purple'], <--array
			yearsAlive: 22, <--number
			isFemale: true <--boolean 

			};


	*can access all values within the object's curly braces with Dot Notation

		ex. kelseyObject.isFemale <--returns value of true



	*objects use curly braces {} then semicolon ; 
	*values go between curly braces

Functions: 

	can be reused
	can be stored in a variable
	a variable can refer to a function

	
	function functionName () {
	method goes into curly braces

	}

		ex. var function whatIsMyFavColor () { <--this function needs a return statement

			}
	


		var doSomething = function () {
			console.log("do something");

			}
		
		Invoking a function--> functionName plus parens ()

		ex. doSomething() <--invokes function


		ex. var whatIsMyFavColor = function () {
			return 'red';

			}

Can return: 
		boolean statements 
		arrays
		anything you want

	*anything after return inside curly braces doesn't run

	*Parameters can go inside of function parens

	ex. function that finds area, width 
		
		var area = function (width, height) {
			return width * height;

		}

		
		*to return stuff with this function you have to input values 

		ex. area(10, 8); 
		'	
			returns value of 10 * 8
			
			80
	
	
		*function that returns firt name and last name

		var fullName = function (firstname, lastname) {
			return firstname + ' ' + lastname

			}

				
	*items within the function parens are called parameters

		
			
If-Else Statements:

	if (//something) {
		//do something

	};

	

	*if what is in the parens is true, do what is in the curly braces
	
	ex. if (true) {
		//do something

	};
	

	ex. if (true) {
		
		alert('female');

	};


More Dynamic ex.

	if ('female' == 'female') {
		alert('female');

	};

*one equals sign assigns a value =
*two equals signs 

stoped at 1:28 in if-else statement video